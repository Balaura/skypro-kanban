//// file: .eslintrc.cjs
module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:react/jsx-runtime',
    'plugin:react-hooks/recommended',
  ],
  ignorePatterns: ['dist', '.eslintrc.cjs'],
  parserOptions: { ecmaVersion: 'latest', sourceType: 'module' },
  settings: { react: { version: '18.2' } },
  plugins: ['react-refresh'],
  rules: {
    'react/jsx-no-target-blank': 'off',
    'react-refresh/only-export-components': [
      'warn',
      { allowConstantExport: true },
    ],
  },
}

//// file: .gitignore
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

//// file: data.js
export const cardList = [ { id: 1, topic: "Web Design", title: "Название задачи", date: "30.10.23", status: "БЕЗ СТАТУСА" }, { id: 2, topic: "Research", title: "Название задачи", date: "31.10.23", status: "БЕЗ СТАТУСА" }, { id: 3, topic: "Web Design", title: "Название задачи", date: "30.10.23", status: "БЕЗ СТАТУСА" }, { id: 4, topic: "Copywriting", title: "Название задачи", date: "31.10.23", status: "БЕЗ СТАТУСА" }, { id: 5, topic: "Web Design", title: "Название задачи", date: "31.10.23", status: "БЕЗ СТАТУСА" }, { id: 6, topic: "Research", title: "Название задачи", date: "30.10.23", status: "НУЖНО СДЕЛАТЬ" }, { id: 7, topic: "Research", title: "Название задачи", date: "30.10.23", status: "В РАБОТЕ" }, { id: 8, topic: "Copywriting", title: "Название задачи", date: "30.10.23", status: "В РАБОТЕ" }, { id: 9, topic: "Web Design", title: "Название задачи", date: "30.10.23", status: "В РАБОТЕ" }, { id: 10, topic: "Research", title: "Название задачи", date: "01.11.23", status: "ТЕСТИРОВАНИЕ" }, { id: 11, topic: "Research", title: "Название задачи", date: "01.11.23", status: "ГОТОВО" }, ];

//// file: index.html
<!doctype html><html lang="en"><head><meta charset="UTF-8" /><link rel="icon" type="image/svg+xml" href="/vite.svg" /><meta name="viewport" content="width=device-width, initial-scale=1.0" /><link rel="stylesheet" href="css/main.css"><link rel="stylesheet" href="css/main_dark.css"><link rel="preconnect" href="https://fonts.googleapis.com"><link rel="preconnect" href="https://fonts.gstatic.com" crossorigin><link href="https://fonts.googleapis.com/css2?" /><title>Vite + React</title></head><body><div id="root"></div><script type="module" src="/src/main.jsx"></script></body></html>

//// file: package.json
{
  "name": "skypro-kanban",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.25.1",
    "styled-components": "^6.1.12"
  },
  "devDependencies": {
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "eslint": "^8.57.0",
    "eslint-plugin-react": "^7.34.3",
    "eslint-plugin-react-hooks": "^4.6.2",
    "eslint-plugin-react-refresh": "^0.4.7",
    "vite": "^5.3.4"
  }
}

//// file: README.md
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

//// file: src\App.css
#root {}.logo {height: 6em;padding: 1.5em;will-change: filter;transition: filter 300ms;}.logo:hover {filter: drop-shadow(0 0 2em #646cffaa);}.logo.react:hover {filter: drop-shadow(0 0 2em #61dafbaa);}@keyframes logo-spin {from {transform: rotate(0deg);}to {transform: rotate(360deg);}}@media (prefers-reduced-motion: no-preference) {a:nth-of-type(2) .logo {animation: logo-spin infinite 20s linear;}}.card {padding: 2em;}.read-the-docs {color: #888;}* {margin: 0;padding: 0;box-sizing: border-box;}*:before,*:after {box-sizing: border-box;}a,a:visited {text-decoration: none;cursor: pointer;}button,._btn {cursor: pointer;outline: none;}ul li {list-style: none;}@keyframes card-animation {0% {height: 0;opacity: 0;}100% {height: auto;opacity: 1;}}html,body {width: 100%;height: 100%;font-family: "Roboto", Arial, Helvetica, sans-serif;color: #000000;}.wrapper {max-width: 100%;width: 100vw;min-height: 100vh;overflow: hidden;background-color: #F1F1F1;}.container {max-width: 1260px;width: 100%;margin: 0 auto;padding: 0 30px;}._hover01:hover {background-color: #33399b;}._hover02:hover, .header__user:hover {color: #33399b;}._hover02:hover::after, .header__user:hover::after {border-left-color: #33399b;border-bottom-color: #33399b;}._hover03:hover {background-color: #33399b;color: #FFFFFF;}._hover03:hover a {color: #FFFFFF;}.pop-user-set:target,.pop-exit:target,.pop-new-card:target,.pop-browse:target {display: block;}._orange {background-color: #FFE4C2;color: #FF6D00;}._green {background-color: #B4FDD1;color: #06B16E;}._purple {background-color: #E9D4FF;color: #9A48F1;}._gray {background: #94A6BE;color: #FFFFFF;}._active-category {opacity: 1 !important;}.pop-wrap {position: relative;top: 0;left: 0;}.pop-exit {display: none;width: 100%;height: 100%;min-width: 320px;min-height: 100vh;position: absolute;top: 0;left: 0;z-index: 5;}.pop-exit__container {width: 100%;height: 100%;min-height: 100vh;padding: 0 16px;display: flex;flex-direction: column;align-items: center;justify-content: center;background: rgba(0, 0, 0, 0.4);}.pop-exit__block {display: block;margin: 0 auto;background-color: #FFFFFF;max-width: 370px;width: 100%;padding: 50px 60px;border-radius: 10px;border: 0.7px solid #D4DBE5;box-shadow: 0px 4px 67px -12px rgba(0, 0, 0, 0.13);}.pop-exit__ttl h2 {text-align: center;font-size: 20px;font-weight: 700;line-height: 30px;letter-spacing: -0.4px;margin-bottom: 20px;}.pop-exit__exit-yes {width: 153px;height: 30px;background-color: #565EEF;border-radius: 4px;border: none;outline: none;display: flex;align-items: center;justify-content: center;font-size: 14px;line-height: 21px;font-weight: 500;letter-spacing: -0.14px;color: #FFFFFF;margin-right: 10px;}.pop-exit__exit-yes a {width: 100%;height: 100%;color: #FFFFFF;display: flex;align-items: center;justify-content: center;}.pop-exit__exit-no {width: 153px;height: 30px;background-color: transparent;border-radius: 4px;border: 0.7px solid var(--palette-navy-60, #565EEF);outline: none;display: flex;align-items: center;justify-content: center;font-size: 14px;line-height: 21px;font-weight: 500;letter-spacing: -0.14px;color: #FFFFFF;}.pop-exit__exit-no a {width: 100%;height: 100%;color: #565EEF;display: flex;align-items: center;justify-content: center;}.pop-exit__form-group {width: 100%;display: flex;align-items: center;justify-content: space-between;}.pop-user-set__name {color: #000;font-size: 14px;font-weight: 500;line-height: 21px;letter-spacing: -0.14px;margin-bottom: 4px;}.pop-user-set__mail {color: #94A6BE;font-size: 14px;line-height: 21px;letter-spacing: -0.14px;margin-bottom: 10px;}.pop-user-set__theme {display: flex;align-items: center;justify-content: space-between;margin-bottom: 30px;}.pop-user-set__theme p {color: #000;font-size: 14px;line-height: 21px;letter-spacing: -0.14px;}.pop-user-set__theme input[type=checkbox] {position: relative;width: 24px;height: 13px;border-radius: 100px;background: #EAEEF6;outline: none;-webkit-appearance: none;-moz-appearance: none;appearance: none;}.pop-user-set__theme input[type=checkbox]::before {content: "";position: absolute;top: 1px;left: 1px;width: 11px;height: 11px;border-radius: 50%;background-color: #94A6BE;transition: 0.5s;}.pop-user-set__theme input:checked[type=checkbox]::before {left: 12px;}.pop-user-set button {width: 72px;height: 30px;background: transparent;color: #565EEF;border-radius: 4px;border: 1px solid #565EEF;}.pop-user-set button a {color: #565EEF;}.pop-new-card {display: none;width: 100%;min-width: 375px;height: 100%;min-height: 100vh;position: absolute;top: 0;left: 0;z-index: 6;}.pop-new-card__container {width: 100%;height: 100%;min-height: 100vh;padding: 0 16px;display: flex;flex-direction: column;align-items: center;justify-content: center;background: rgba(0, 0, 0, 0.4);}.pop-new-card__block {display: block;margin: 0 auto;background-color: #FFFFFF;max-width: 630px;width: 100%;padding: 40px 30px 48px;border-radius: 10px;border: 0.7px solid #D4DBE5;position: relative;}.pop-new-card__content {display: block;text-align: left;}.pop-new-card__ttl {color: #000;font-size: 20px;font-weight: 600;line-height: 24px;margin-bottom: 20px;}.pop-new-card__close {position: absolute;top: 20px;right: 30px;color: #94A6BE;cursor: pointer;}.pop-new-card__close:hover {color: #000000;}.pop-new-card__wrap {display: flex;align-items: flex-start;justify-content: space-between;}.pop-new-card__form {max-width: 370px;width: 100%;display: block;margin-bottom: 20px;}.form-new__block {display: flex;flex-direction: column;}.form-new__input, .form-new__area {width: 100%;outline: none;padding: 14px;background: transparent;border: 0.7px solid rgba(148, 166, 190, 0.4);border-radius: 8px;font-size: 14px;line-height: 1;letter-spacing: -0.14px;}.form-new__input::-moz-placeholder, .form-new__area::-moz-placeholder {font-weight: 400;font-size: 14px;line-height: 1px;color: #94A6BE;letter-spacing: -0.14px;}.form-new__input::placeholder, .form-new__area::placeholder {font-weight: 400;font-size: 14px;line-height: 1px;color: #94A6BE;letter-spacing: -0.14px;}.form-new__input {margin: 20px 0;}.form-new__area {max-width: 370px;margin-top: 14px;height: 200px;}.form-new__create {width: 132px;height: 30px;background-color: #565EEF;border-radius: 4px;border: 0;outline: none;font-size: 14px;font-weight: 500;line-height: 1;color: #FFFFFF;float: right;}.subttl {color: #000;font-size: 14px;font-weight: 600;line-height: 1;}.calendar {width: 182px;margin-bottom: 20px;}.calendar__ttl {margin-bottom: 14px;padding: 0 7px;}.calendar__p {color: #94A6BE;font-size: 10px;line-height: 1;}.calendar__p span {color: #000000;}.calendar__block {display: block;}.calendar__month {color: #94A6BE;font-size: 14px;line-height: 25px;font-weight: 600;}.calendar__content {margin-bottom: 12px;}.calendar__days-names {display: flex;flex-wrap: nowrap;align-items: center;justify-content: space-between;margin: 7px 0;padding: 0 7px;}.calendar__day-name {color: #94A6BE;font-size: 10px;font-weight: 500;line-height: normal;letter-spacing: -0.2px;}.calendar__cells {width: 182px;height: 126px;display: flex;flex-wrap: wrap;}.calendar__cell {width: 22px;height: 22px;margin: 2px;border-radius: 50%;display: flex;flex-wrap: nowrap;align-items: center;justify-content: center;color: #94A6BE;font-size: 10px;line-height: 1;letter-spacing: -0.2px;cursor: pointer;}.calendar__nav {width: 100%;display: flex;align-items: center;justify-content: space-between;margin-top: 14px;padding: 0 7px;}.calendar__period {padding: 0 7px;}.nav__actions {display: flex;align-items: center;justify-content: space-between;}.nav__action {width: 18px;height: 25px;cursor: pointer;display: flex;align-items: center;justify-content: center;}.nav__action svg {fill: #94A6BE;}._other-month {opacity: 0;}._cell-day:hover {color: #94A6BE;background-color: #EAEEF6;}._active-day {background-color: #94A6BE;color: #FFFFFF;}._current {font-weight: 700;}.categories {margin-bottom: 20px;}.categories__themes {display: flex;flex-wrap: nowrap;align-items: flex-start;justify-content: flex-start;}.categories__p {margin-bottom: 14px;}.categories__theme {display: inline-block;width: auto;height: 30px;padding: 8px 20px;border-radius: 24px;margin-right: 7px;opacity: 0.4;}.categories__theme p {font-size: 14px;font-weight: 600;line-height: 14px;white-space: nowrap;}.pop-browse {display: none;width: 100%;height: 100%;min-width: 375px;min-height: 100vh;position: absolute;top: 0;left: 0;z-index: 7;}.pop-browse__container {width: 100%;height: 100%;min-height: 100vh;padding: 0 16px;display: flex;flex-direction: column;align-items: center;justify-content: center;background: rgba(0, 0, 0, 0.4);}.pop-browse__block {display: block;margin: 0 auto;background-color: #FFFFFF;max-width: 630px;width: 100%;padding: 40px 30px 38px;border-radius: 10px;border: 0.7px solid #D4DBE5;position: relative;}.pop-browse__content {display: block;text-align: left;}.pop-browse__content .categories__theme {opacity: 1;}.pop-browse__content .theme-down {display: none;margin-bottom: 20px;}.pop-browse__content .theme-top {display: block;}.pop-browse__top-block {display: flex;align-items: center;justify-content: space-between;margin-bottom: 18px;}.pop-browse__ttl {color: #000;font-size: 20px;font-weight: 600;line-height: 24px;}.pop-browse__wrap {display: flex;align-items: flex-start;justify-content: space-between;}.pop-browse__form {max-width: 370px;width: 100%;display: block;margin-bottom: 20px;}.pop-browse__btn-browse, .pop-browse__btn-edit {display: flex;flex-wrap: wrap;align-items: flex-start;justify-content: space-between;}.pop-browse__btn-browse button, .pop-browse__btn-edit button {height: 30px;margin-bottom: 10px;padding: 0 14px;}.pop-browse__btn-browse .btn-group button, .pop-browse__btn-edit .btn-group button {margin-right: 8px;}.form-browse__block {display: flex;flex-direction: column;}.form-browse__area {max-width: 370px;width: 100%;outline: none;padding: 14px;background: #EAEEF6;border: 0.7px solid rgba(148, 166, 190, 0.4);border-radius: 8px;font-size: 14px;line-height: 1;letter-spacing: -0.14px;margin-top: 14px;height: 200px;}.form-browse__area::-moz-placeholder {font-weight: 400;font-size: 14px;line-height: 1px;color: #94A6BE;letter-spacing: -0.14px;}.form-browse__area::placeholder {font-weight: 400;font-size: 14px;line-height: 1px;color: #94A6BE;letter-spacing: -0.14px;}.status {margin-bottom: 11px;}.status__p {margin-bottom: 14px;}.status__themes {display: flex;flex-wrap: wrap;align-items: flex-start;justify-content: flex-start;}.status__theme {border-radius: 24px;border: 0.7px solid rgba(148, 166, 190, 0.4);color: #94A6BE;padding: 11px 14px 10px;margin-right: 7px;margin-bottom: 7px;}.status__theme p {font-size: 14px;line-height: 1;letter-spacing: -0.14px;}._btn-bor {border-radius: 4px;border: 0.7px solid var(--palette-navy-60, #565EEF);outline: none;background: transparent;color: #565EEF;}._btn-bor a {color: #565EEF;}._btn-bg {border-radius: 4px;background: #565EEF;border: none;outline: none;color: #FFFFFF;}._btn-bg a {color: #FFFFFF;}._hide {display: none;}._dark {display: none;}.header {width: 100%;margin: 0 auto;background-color: #FFFFFF;}.header__block {height: 70px;display: flex;flex-wrap: nowrap;align-items: center;justify-content: space-between;position: relative;top: 0;left: 0;padding: 0 10px;}.header__logo img {width: 85px;}.header__nav {max-width: 290px;padding: 0;display: flex;align-items: center;justify-content: center;}.header__btn-main-new {width: 178px;height: 30px;border-radius: 4px;background-color: #565EEF;color: #FFFFFF;border: none;font-size: 14px;line-height: 1;font-weight: 500;margin-right: 20px;}.header__btn-main-new a {color: #FFFFFF;}.header__user {height: 20px;display: flex;flex-wrap: nowrap;align-items: center;justify-content: center;font-size: 14px;line-height: 20px;color: #565EEF;}.header__user::after {content: "";display: block;width: 6px;height: 6px;border-radius: 1px;border-left: 1.9px solid #565EEF;border-bottom: 1.9px solid #565EEF;transform: rotate(-45deg);margin: -6px 0 0 5px;padding: 0;}.header__pop-user-set {display: none;position: absolute;top: 61px;right: 0;width: 213px;height: 205px;border-radius: 10px;border: 0.7px solid rgba(148, 166, 190, 0.4);background: #FFF;box-shadow: 0px 10px 39px 0px rgba(26, 56, 101, 0.21);padding: 34px;text-align: center;z-index: 2;}.main {width: 100%;background-color: #EAEEF6;}.main__block {width: 100%;margin: 0 auto;padding: 25px 0 49px;}.main__content {width: 100%;display: flex;}.main__column {width: 20%;margin: 0 auto;display: block;}.column__title {padding: 0 10px;margin: 15px 0;}.column__title p {color: #94A6BE;font-size: 14px;font-weight: 600;line-height: 1;text-transform: uppercase;}.cards {width: 100%;display: block;position: relative;}.cards__item {padding: 5px;animation-name: card-animation;animation-duration: 500ms;animation-timing-function: linear;}.cards__card {width: 220px;height: 130px;background-color: #FFFFFF;border-radius: 10px;display: flex;flex-direction: column;align-items: flex-start;justify-content: stretch;padding: 15px 13px 19px;}.card__group {width: 100%;height: 20px;margin-bottom: 12px;display: flex;align-items: center;justify-content: space-between;}.card__theme {width: auto;height: 20px;padding: 5px 14px;border-radius: 18px;}.card__theme p {font-size: 10px;font-weight: 600;line-height: 10px;}.card__btn {width: 24px;height: 24px;display: flex;align-items: center;justify-content: space-around;padding: 2px;}.card__btn div {width: 4px;height: 4px;border-radius: 50%;background-color: #94A6BE;}.card__title {font-size: 14px;font-weight: 500;line-height: 18px;color: #000000;margin-bottom: 10px;}.card__content {height: 64px;display: flex;flex-direction: column;align-items: flex-start;justify-content: space-between;}.card__date {display: flex;align-items: center;justify-content: flex-start;}.card__date svg {width: 13px;}.card__date p {margin-left: 6px;font-size: 10px;line-height: 13px;color: #94A6BE;letter-spacing: 0.2px;}@media screen and (max-width: 1200px) {.main__block {width: 100%;margin: 0 auto;padding: 40px 0 64px;}.main__content {display: block;}.main__column {width: 100%;margin: 0 auto;display: block;}.cards {width: 100%;display: flex;overflow-y: auto;}.cards__card {width: 220px;height: 130px;background-color: #FFFFFF;border-radius: 10px;display: flex;flex-direction: column;align-items: flex-start;justify-content: stretch;padding: 15px 13px 19px;}}@media screen and (max-width: 660px) {.pop-new-card {top: 70px;}.pop-new-card__container {padding: 0;justify-content: flex-start;}.pop-new-card__block {border-radius: 0;}.pop-new-card__wrap {display: block;}.calendar {max-width: 340px;width: 100%;}.calendar__ttl, .calendar__nav, .calendar__period {padding: 0;}.calendar .date-create {display: none;margin-bottom: 7px;}.calendar__p {font-size: 14px;}.calendar__day-name {font-size: 14px;}.calendar__cells {width: 344px;height: auto;display: flex;flex-wrap: wrap;justify-content: space-around;}.calendar__cell {width: 42px;height: 42px;font-size: 14px;}.pop-browse {top: 70px;}.pop-browse__container {padding: 0;justify-content: flex-start;}.pop-browse__block {border-radius: 0;}.pop-browse__wrap {display: block;}}@media screen and (max-width: 495px) {.container {width: 100%;padding: 0 16px;}.header__btn-main-new {z-index: 3;position: fixed;left: 16px;bottom: 30px;top: auto;width: calc(100vw - 32px);height: 40px;border-radius: 4px;margin-right: 0;}.pop-new-card__container {padding: 0;justify-content: flex-start;}.pop-new-card__block {padding: 20px 16px 32px;}.pop-new-card__form {max-width: 100%;width: 100%;display: block;}.pop-new-card__calendar {width: 100%;}.form-new__area {max-width: 100%;height: 34px;}.form-new__create {width: 100%;height: 40px;}.pop-browse__block {padding: 20px 16px 32px;}.pop-browse__content .theme-down {display: block;margin-bottom: 20px;}.pop-browse__content .theme-top {display: none;}.pop-browse__form {max-width: 100%;}.pop-browse__calendar {width: 100%;}.pop-browse__btn-browse button, .pop-browse__btn-edit button {width: 100%;height: 40px;}.pop-browse__btn-browse .btn-group, .pop-browse__btn-edit .btn-group {width: 100%;}.pop-browse__btn-browse .btn-group button, .pop-browse__btn-edit .btn-group button {margin-right: 0px;}.form-browse__area {max-width: 100%;}.form-browse__area {height: 37px;}}@media only screen and (max-width: 375px) {.pop-exit__block {padding: 50px 20px;}.pop-exit__exit-yes {width: 100%;height: 40px;margin-right: 0;margin-bottom: 10px;}.pop-exit__exit-no {width: 100%;height: 40px;}.pop-exit__form-group {display: block;}}.loading {display: flex;justify-content: center;align-items: center;height: 100vh;font-size: 24px;color: #333;}

//// file: src\App.jsx
import React, { useState, useEffect } from 'react'; import { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom'; import { ThemeProvider } from 'styled-components'; import GlobalStyle from './styles/GlobalStyles'; import { themeColors } from './styles/Themes'; import MainPage from './pages/MainPage'; import LoginPage from './pages/LoginPage'; import RegisterPage from './pages/RegisterPage'; import CardPage from './pages/CardPage'; import ExitPage from './pages/ExitPage'; import NotFoundPage from './pages/NotFoundPage'; function App() { const [isAuth, setIsAuth] = useState(false); const [theme, setTheme] = useState('light'); useEffect(() => { const savedTheme = localStorage.getItem('theme'); if (savedTheme) { setTheme(savedTheme); } }, []); const toggleTheme = () => { const newTheme = theme === 'light' ? 'dark' : 'light'; setTheme(newTheme); localStorage.setItem('theme', newTheme); }; return ( <ThemeProvider theme={themeColors[theme]}> <GlobalStyle /> <Router> <Routes> <Route path="/login" element={<LoginPage setIsAuth={setIsAuth} />} /> <Route path="/register" element={<RegisterPage />} /> <Route path="/" element={ isAuth ? ( <MainPage toggleTheme={toggleTheme} setIsAuth={setIsAuth} /> ) : ( <Navigate to="/login" /> ) } /> <Route path="/card/:id" element={ isAuth ? <CardPage /> : <Navigate to="/login" /> } /> <Route path="/exit" element={ isAuth ? <ExitPage setIsAuth={setIsAuth} /> : <Navigate to="/login" /> } /> <Route path="*" element={<NotFoundPage />} /> </Routes> </Router> </ThemeProvider> ); } export default App;

//// file: src\App_04_original.jsx
import React, { useState, useEffect } from 'react'; import Header from './components/Header/Header'; import Main from './components/Main/Main'; import PopBrowse from './components/Popups/PopBrowse/PopBrowse'; import PopNewCard from './components/Popups/PopNewCard/PopNewCard'; import PopUser from './components/Popups/PopUser/PopUser'; import { cardList } from '../data'; import './App.css'; function App() { const [cards, setCards] = useState([]); const [isLoading, setIsLoading] = useState(true); useEffect(() => { setTimeout(() => { setCards(cardList); setIsLoading(false); }, 2000); }, []); function onCardAdd() { const newCard = { id: cards.length + 1, topic: "Research", title: "Название задачи", date: new Date().toLocaleDateString('ru-RU'), status: "Без статуса" }; setCards([...cards, newCard]); } return ( <div className="wrapper"> <PopBrowse /> <PopNewCard onCardAdd={onCardAdd} /> <PopUser /> <Header onCardAdd={onCardAdd} /> {isLoading ? ( <div className="loading">Данные загружаются...</div> ) : ( <Main cards={cards} /> )} </div> ) } export default App;

//// file: src\components\Calendar\Calendar.jsx
import React from 'react'; import { CalendarWrapper, CalendarTitle, CalendarContent, CalendarMonth, CalendarDaysNames, CalendarDayName, CalendarCells, CalendarCell, CalendarNav, NavAction, CalendarPeriod, CalendarP } from './CalendarStyles'; function Calendar() { return ( <CalendarWrapper className="calendar"> <CalendarTitle className="calendar__ttl subttl">Даты</CalendarTitle> <div className="calendar__block"> <CalendarNav className="calendar__nav"> <CalendarMonth className="calendar__month">Сентябрь 2023</CalendarMonth> <div className="nav__actions"> <NavAction className="nav__action" data-action="prev"> <svg xmlns="http://www.w3.org/2000/svg" width={6} height={11} viewBox="0 0 6 11"> <path d="M5.72945 1.95273C6.09018 1.62041 6.09018 1.0833 5.72945 0.750969C5.36622 0.416344 4.7754 0.416344 4.41218 0.750969L0.528487 4.32883C-0.176162 4.97799 -0.176162 6.02201 0.528487 6.67117L4.41217 10.249C4.7754 10.5837 5.36622 10.5837 5.72945 10.249C6.09018 9.9167 6.09018 9.37959 5.72945 9.04727L1.87897 5.5L5.72945 1.95273Z" /> </svg> </NavAction> <NavAction className="nav__action" data-action="next"> <svg xmlns="http://www.w3.org/2000/svg" width={6} height={11} viewBox="0 0 6 11"> <path d="M0.27055 9.04727C-0.0901833 9.37959 -0.0901832 9.9167 0.27055 10.249C0.633779 10.5837 1.2246 10.5837 1.58783 10.249L5.47151 6.67117C6.17616 6.02201 6.17616 4.97799 5.47151 4.32883L1.58782 0.75097C1.2246 0.416344 0.633778 0.416344 0.270549 0.75097C-0.0901831 1.0833 -0.090184 1.62041 0.270549 1.95273L4.12103 5.5L0.27055 9.04727Z" /> </svg> </NavAction> </div> </CalendarNav> <CalendarContent className="calendar__content"> <CalendarDaysNames className="calendar__days-names"> <CalendarDayName className="calendar__day-name">пн</CalendarDayName> <CalendarDayName className="calendar__day-name">вт</CalendarDayName> <CalendarDayName className="calendar__day-name">ср</CalendarDayName> <CalendarDayName className="calendar__day-name">чт</CalendarDayName> <CalendarDayName className="calendar__day-name">пт</CalendarDayName> <CalendarDayName className="calendar__day-name -weekend-">сб</CalendarDayName> <CalendarDayName className="calendar__day-name -weekend-">вс</CalendarDayName> </CalendarDaysNames> <CalendarCells className="calendar__cells"> {/* Здесь будут ячейки календаря */} {/* Пример: */} <CalendarCell className="_other-month">28</CalendarCell> <CalendarCell className="_cell-day">1</CalendarCell> <CalendarCell className="_cell-day _current">8</CalendarCell> {/* ... остальные ячейки */} </CalendarCells> </CalendarContent> <input type="hidden" id="datepick_value" defaultValue="08.09.2023" /> <CalendarPeriod className="calendar__period"> <CalendarP className="calendar__p date-end"> Выберите срок исполнения <span className="date-control" />. </CalendarP> </CalendarPeriod> </div> </CalendarWrapper> ); } export default Calendar;

//// file: src\components\Calendar\CalendarStyles.js
import styled from 'styled-components'; import { themeColors } from '../../styles/Themes'; export const CalendarWrapper = styled.div` width: 182px; margin-bottom: 20px; `; export const CalendarTitle = styled.p` margin-bottom: 14px; padding: 0 7px; color: ${props => props.theme.textPrimary}; font-size: 14px; font-weight: 600; line-height: 1; `; export const CalendarContent = styled.div` margin-bottom: 12px; `; export const CalendarMonth = styled.div` color: ${props => props.theme.textSecondary}; font-size: 14px; line-height: 25px; font-weight: 600; `; export const CalendarDaysNames = styled.div` display: flex; flex-wrap: nowrap; align-items: center; justify-content: space-between; margin: 7px 0; padding: 0 7px; `; export const CalendarDayName = styled.div` color: ${props => props.theme.textSecondary}; font-size: 10px; font-weight: 500; line-height: normal; letter-spacing: -0.2px; `; export const CalendarCells = styled.div` width: 182px; height: 126px; display: flex; flex-wrap: wrap; `; export const CalendarCell = styled.div` width: 22px; height: 22px; margin: 2px; border-radius: 50%; display: flex; flex-wrap: nowrap; align-items: center; justify-content: center; color: ${props => props.theme.textSecondary}; font-size: 10px; line-height: 1; letter-spacing: -0.2px; cursor: pointer; &._other-month { opacity: 0; } &._cell-day:hover { color: ${props => props.theme.textSecondary}; background-color: ${props => props.theme.background}; } &._active-day { background-color: ${props => props.theme.secondary}; color: ${props => props.theme.cardBackground}; } &._current { font-weight: 700; } `; export const CalendarNav = styled.div` width: 100%; display: flex; align-items: center; justify-content: space-between; margin-top: 14px; padding: 0 7px; `; export const NavAction = styled.div` width: 18px; height: 25px; cursor: pointer; display: flex; align-items: center; justify-content: center; svg { fill: ${props => props.theme.textSecondary}; } `; export const CalendarPeriod = styled.div` padding: 0 7px; `; export const CalendarP = styled.p` color: ${props => props.theme.textSecondary}; font-size: 10px; line-height: 1; span { color: ${props => props.theme.textPrimary}; } `;

//// file: src\components\Card\Card.jsx
import React from 'react'; import { CardWrapper, CardGroup, CardTheme, ThemeText, CardButton, ButtonDot, CardContent, CardTitle, CardDate, DateText } from './CardStyles'; import { Link } from 'react-router-dom'; function Card({ id, title, topic = '', date }) { const getTopicClassName = (topic) => { switch ((topic || '').toLowerCase()) { case 'web design': return 'web-design'; case 'research': return 'research'; case 'copywriting': return 'copywriting'; default: return 'default'; } }; const topicClassName = getTopicClassName(topic); return ( <CardWrapper> <CardGroup> <CardTheme $topic={topicClassName}> <ThemeText $topic={topicClassName}>{topic}</ThemeText> </CardTheme> <CardButton> <ButtonDot /> <ButtonDot /> <ButtonDot /> </CardButton> </CardGroup> <CardContent> <Link to={`/card/${id}`}> <CardTitle>{title}</CardTitle> </Link> <CardDate> <svg xmlns="http://www.w3.org/2000/svg" width={13} height={13} viewBox="0 0 13 13" fill="none"> <g clipPath="url(#clip0_1_415)"> <path d="M10.5625 2.03125H2.4375C1.7644 2.03125 1.21875 2.5769 1.21875 3.25V10.5625C1.21875 11.2356 1.7644 11.7812 2.4375 11.7812H10.5625C11.2356 11.7812 11.7812 11.2356 11.7812 10.5625V3.25C11.7812 2.5769 11.2356 2.03125 10.5625 2.03125Z" stroke="#94A6BE" strokeWidth="0.8" strokeLinejoin="round" /> <path d="M11.7812 4.0625H1.21875M3.25 1.21875V2.03125V1.21875ZM9.75 1.21875V2.03125V1.21875Z" stroke="#94A6BE" strokeWidth="0.8" strokeLinecap="round" strokeLinejoin="round" /> </g> <defs> <clipPath id="clip0_1_415"> <rect width={13} height={13} fill="white" /> </clipPath> </defs> </svg> <DateText>{date}</DateText> </CardDate> </CardContent> </CardWrapper> ); } export default Card;

//// file: src\components\Card\CardStyles.js
import styled from 'styled-components'; import { cardContainerStyles } from '../../styles/CommonStyles'; export const CardWrapper = styled.div` ${cardContainerStyles} width: 220px; height: 130px; display: flex; flex-direction: column; padding: 15px 13px 19px; margin-bottom: 15px; input, textarea, button { &:focus { outline: none; border-color: ${props => props.theme.primary}; } } `; export const CardGroup = styled.div` width: 100%; height: 20px; margin-bottom: 12px; display: flex; align-items: center; justify-content: space-between; `; export const CardTheme = styled.div` width: auto; height: 20px; padding: 5px 14px; border-radius: 18px; background-color: ${({ $topic, theme }) => theme.topicStyles[$topic]?.backgroundColor || theme.topicStyles.default.backgroundColor}; `; export const ThemeText = styled.p` font-size: 10px; font-weight: 600; line-height: 10px; color: ${({ $topic, theme }) => theme.topicStyles[$topic]?.color || theme.topicStyles.default.color}; `; export const CardButton = styled.div` width: 24px; height: 24px; display: flex; align-items: center; justify-content: space-around; padding: 2px; `; export const ButtonDot = styled.div` width: 4px; height: 4px; border-radius: 50%; background-color: ${props => props.theme.textSecondary}; `; export const CardContent = styled.div` height: 64px; display: flex; flex-direction: column; align-items: flex-start; justify-content: space-between; `; export const CardTitle = styled.h3` font-size: 14px; font-weight: 500; line-height: 18px; color: ${props => props.theme.textPrimary}; margin-bottom: 10px; `; export const CardDate = styled.div` display: flex; align-items: center; justify-content: flex-start; `; export const DateText = styled.p` margin-left: 6px; font-size: 10px; line-height: 13px; color: ${props => props.theme.textSecondary}; letter-spacing: 0.2px; input, textarea, button { &:focus { outline: none; border-color: ${props => props.theme.primary}; } } `;

//// file: src\components\Column\Column.jsx
import React from 'react'; import Card from '../Card/Card'; import { ColumnWrapper, ColumnTitle, CardsContainer } from './ColumnStyles'; function Column({ title, tasks }) { return ( <ColumnWrapper> <ColumnTitle> <p>{title}</p> </ColumnTitle> <CardsContainer> {tasks.map((task) => ( <Card key={task.id} id={task.id} title={task.title} topic={task.topic} date={task.date} /> ))} </CardsContainer> </ColumnWrapper> ); } export default Column;

//// file: src\components\Column\ColumnStyles.js
import styled from 'styled-components'; export const ColumnWrapper = styled.div` width: 20%; margin: 0 auto; display: block; `; export const ColumnTitle = styled.div` padding: 0 10px; margin: 15px 0; p { color: ${props => props.theme.textSecondary}; font-size: 14px; font-weight: 600; line-height: 1; text-transform: uppercase; } `; export const CardsContainer = styled.div` width: 100%; display: block; position: relative; `; export const CardsItem = styled.div` padding: 5px; animation-name: card-animation; animation-duration: 500ms; animation-timing-function: linear; `;

//// file: src\components\Header\Header.jsx
import React, { useState } from 'react'; import { Link } from 'react-router-dom'; import { useTheme } from 'styled-components'; import logoLight from '../../../public/logo.png'; import logoDark from '../../../public/logo_dark.png'; import { HeaderWrapper, HeaderBlock, HeaderLogo, HeaderNav, HeaderBtnMainNew, HeaderUser, UserMenu, UserName, UserEmail, ThemeToggleWrapper, ThemeToggle, ToggleInput, ToggleSlider, ExitButton } from './HeaderStyles'; const Header = ({ toggleTheme, setIsAuth }) => { const theme = useTheme(); const [isUserMenuOpen, setIsUserMenuOpen] = useState(false); const handleLogout = () => { setIsAuth(false); }; return ( <HeaderWrapper> <HeaderBlock> <HeaderLogo> <img src={theme.name === 'dark' ? logoDark : logoLight} alt="Logo" /> {/* <img src="/logo.png" alt="Logo" /> */} </HeaderLogo> <HeaderNav> <HeaderBtnMainNew as={Link} to="/card/new">Создать новую задачу</HeaderBtnMainNew> <HeaderUser onClick={() => setIsUserMenuOpen(!isUserMenuOpen)}>Ivan Ivanov</HeaderUser> </HeaderNav> </HeaderBlock> {isUserMenuOpen && ( <UserMenu> <UserName>Ivan Ivanov</UserName> <UserEmail>ivan.ivanov@example.com</UserEmail> <ThemeToggleWrapper> <p>Темная тема</p> <ThemeToggle> <ToggleInput type="checkbox" onChange={toggleTheme} /> <ToggleSlider /> </ThemeToggle> </ThemeToggleWrapper> <ExitButton as={Link} to="/exit" onClick={handleLogout}>Выйти</ExitButton> </UserMenu> )} </HeaderWrapper> ); }; export default Header;

//// file: src\components\Header\HeaderStyles.js
import styled from 'styled-components'; import { buttonStyles } from '../../styles/CommonStyles'; export const HeaderWrapper = styled.header` width: 100%; margin: 0 auto; background-color: ${props => props.theme.cardBackground}; `; export const HeaderBlock = styled.div` height: 70px; display: flex; flex-wrap: nowrap; align-items: center; justify-content: space-between; position: relative; top: 0; left: 0; padding: 0 10px; `; export const HeaderLogo = styled.div` img { width: 85px; } `; export const HeaderNav = styled.nav` max-width: 290px; padding: 0; display: flex; align-items: center; justify-content: center; `; export const HeaderBtnMainNew = styled.button` ${buttonStyles} width: auto; min-width: 178px; height: 40px; padding: 0 20px; margin-right: 20px; background-color: #565EEF; color: #FFFFFF; font-size: 14px; line-height: 1; font-weight: 500; border-radius: 4px; &:hover { background-color: #33399b; } `; export const HeaderUser = styled.a` color: #565EEF; font-weight: 500; height: 20px; display: flex; flex-wrap: nowrap; align-items: center; justify-content: center; font-size: 14px; line-height: 20px; color: ${props => props.theme.primary}; &::after { content: ""; display: block; width: 6px; height: 6px; border-radius: 1px; border-left: 1.9px solid ${props => props.theme.primary}; border-bottom: 1.9px solid ${props => props.theme.primary}; transform: rotate(-45deg); margin: -6px 0 0 5px; margin-top: -2px; padding: 0; } `; export const UserMenu = styled.div` position: absolute; top: 61px; right: 10зч; width: 213px; background-color: ${props => props.theme.cardBackground}; border-radius: 10px; box-shadow: 0px 10px 39px rgba(26, 56, 101, 0.21); padding: 34px; z-index: 10; text-align: center; `; export const UserName = styled.p` font-weight: 500; font-size: 14px; line-height: 21px; color: ${props => props.theme.textPrimary}; margin-bottom: 4px; `; export const UserEmail = styled.p` font-size: 14px; line-height: 21px; color: ${props => props.theme.textSecondary}; margin-bottom: 10px; `; export const ThemeToggleWrapper = styled.div` display: flex; align-items: center; justify-content: space-between; margin-bottom: 15px; `; export const ThemeToggle = styled.label` position: relative; display: inline-block; width: 32px; height: 20px; `; export const ToggleInput = styled.input` opacity: 0; width: 0; height: 0; &:checked + span { background-color: #565EEF; } &:checked + span:before { transform: translateX(12px); } `; export const ToggleSlider = styled.span` position: absolute; cursor: pointer; top: 0; left: 0; right: 0; bottom: 0; background-color: #C1C1C1; transition: .4s; border-radius: 34px; &:before { position: absolute; content: ""; height: 16px; width: 16px; left: 2px; bottom: 2px; background-color: white; transition: .4s; border-radius: 50%; } `; export const ExitButton = styled.button` width: 72px; height: 30px; background-color: transparent; border: 1px solid ${props => props.theme.primary || '#565EEF'}; border-radius: 4px; color: ${props => props.theme.primary || '#565EEF'}; font-size: 14px; line-height: 21px; font-weight: 500; cursor: pointer; transition: background-color 0.3s ease, color 0.3s ease; &:hover { background-color: ${props => props.theme.primary || '#565EEF'}; color: ${props => props.theme.cardBackground || '#FFFFFF'}; } `;

//// file: src\components\Main\Main.jsx
import React from 'react'; import Column from '../Column/Column'; import { MainWrapper, MainBlock, MainContent } from './MainStyles'; const statusList = [ "Без статуса", "Нужно сделать", "В работе", "Тестирование", "Готово", ]; function Main({ cards, onCardEdit, onCardDelete }) { return ( <MainWrapper> <div className="container"> <MainBlock> <MainContent> {statusList.map((status) => ( <Column key={status} title={status} tasks={cards.filter((card) => (card.status || '').toLowerCase() === status.toLowerCase())} onCardEdit={onCardEdit} onCardDelete={onCardDelete} /> ))} </MainContent> </MainBlock> </div> </MainWrapper> ); } export default Main;

//// file: src\components\Main\MainStyles.js
import styled from 'styled-components'; export const MainWrapper = styled.main` width: 100%; background-color: ${props => props.theme.background}; `; export const MainBlock = styled.div` width: 100%; margin: 0 auto; padding: 25px 0 49px; `; export const MainContent = styled.div` width: 100%; display: flex; `;

//// file: src\components\Popups\PopBrowse\PopBrowse.jsx
import React, { useState, useEffect } from 'react'; import Calendar from '../../Calendar/Calendar'; import { PopupWrapper, PopupContent, TopBlock, Title, StatusBlock, StatusTitle, StatusThemes, StatusTheme, Form, TextArea, ButtonGroup, Button } from './PopBrowseStyles'; function PopBrowse({ card, onClose, onEdit, onDelete }) { const [editedCard, setEditedCard] = useState(card); const [isEditing, setIsEditing] = useState(false); useEffect(() => { setEditedCard(card); }, [card]); if (!card) return null; const handleSave = () => { if (onEdit) onEdit(editedCard); setIsEditing(false); }; const handleDelete = () => { if (onDelete) onDelete(card.id); onClose(); }; return ( <PopupWrapper> <PopupContent> <TopBlock> <Title>{isEditing ? 'Редактирование задачи' : 'Просмотр задачи'}</Title> </TopBlock> <StatusBlock> <StatusTitle>Статус</StatusTitle> <StatusThemes> {['Без статуса', 'Нужно сделать', 'В работе', 'Тестирование', 'Готово'].map(status => ( <StatusTheme key={status} isActive={editedCard.status === status} onClick={() => isEditing && setEditedCard({...editedCard, status})} > {status} </StatusTheme> ))} </StatusThemes> </StatusBlock> <Form> <TextArea value={editedCard.description} onChange={(e) => isEditing && setEditedCard({...editedCard, description: e.target.value})} readOnly={!isEditing} placeholder="Введите описание задачи..." /> </Form> <Calendar /> <ButtonGroup> {isEditing ? ( <> <Button primary onClick={handleSave}>Сохранить</Button> <Button onClick={() => setIsEditing(false)}>Отменить</Button> <Button onClick={handleDelete}>Удалить задачу</Button> </> ) : ( <> <Button primary onClick={() => setIsEditing(true)}>Редактировать задачу</Button> <Button onClick={handleDelete}>Удалить задачу</Button> </> )} <Button onClick={onClose}>Закрыть</Button> </ButtonGroup> </PopupContent> </PopupWrapper> ); } export default PopBrowse;

//// file: src\components\Popups\PopBrowse\PopBrowseStyles.js
import styled from 'styled-components'; export const PopupWrapper = styled.div` position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); display: flex; justify-content: center; align-items: center; z-index: 1000; `; export const PopupContent = styled.div` background-color: ${props => props.theme.cardBackground}; border-radius: 10px; padding: 40px 30px; width: 630px; max-width: 90%; `; export const TopBlock = styled.div` display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; `; export const Title = styled.h3` font-size: 20px; font-weight: bold; color: ${props => props.theme.textPrimary}; `; export const StatusBlock = styled.div` margin-bottom: 20px; `; export const StatusTitle = styled.p` font-size: 14px; margin-bottom: 10px; color: ${props => props.theme.textSecondary}; `; export const StatusThemes = styled.div` display: flex; gap: 10px; `; export const StatusTheme = styled.div` padding: 8px 20px; border-radius: 24px; font-size: 14px; background-color: ${props => props.isActive ? props.theme.primary : 'transparent'}; color: ${props => props.isActive ? props.theme.cardBackground : props.theme.textPrimary}; border: 1px solid ${props => props.isActive ? props.theme.primary : props.theme.secondary}; cursor: pointer; `; export const Form = styled.form` margin-bottom: 20px; `; export const TextArea = styled.textarea` width: 100%; height: 100px; padding: 10px; border: 1px solid ${props => props.theme.secondary}; border-radius: 5px; background-color: ${props => props.theme.cardBackground}; color: ${props => props.theme.textPrimary}; resize: vertical; `; export const ButtonGroup = styled.div` display: flex; justify-content: space-between; margin-top: 20px; `; export const Button = styled.button` padding: 8px 20px; border-radius: 4px; font-size: 14px; cursor: pointer; background-color: ${props => props.primary ? props.theme.primary : 'transparent'}; color: ${props => props.primary ? props.theme.cardBackground : props.theme.primary}; border: 1px solid ${props => props.theme.primary}; `;

//// file: src\components\Popups\PopNewCard\PopNewCard.jsx
import React, { useState } from 'react'; import Calendar from '../../Calendar/Calendar'; import { PopupWrapper, PopupContent, Title, Form, InputGroup, Label, Input, TextArea, Button } from '../PopNewCard/PopNewCardStyles'; function PopNewCard({ isOpen, onClose, onCardAdd }) { const [title, setTitle] = useState(''); const [description, setDescription] = useState(''); if (!isOpen) return null; const handleCreateNewTask = (e) => { e.preventDefault(); onCardAdd({ id: Date.now(), title: title, description: description, date: new Date().toLocaleDateString('ru-RU'), status: "Без статуса" }); setTitle(''); setDescription(''); onClose(); }; return ( <PopupWrapper> <PopupContent> <Title>Создание задачи</Title> <Form onSubmit={handleCreateNewTask}> <InputGroup> <Label htmlFor="taskTitle">Название задачи</Label> <Input id="taskTitle" type="text" value={title} onChange={(e) => setTitle(e.target.value)} placeholder="Введите название задачи..." required /> </InputGroup> <InputGroup> <Label htmlFor="taskDescription">Описание задачи</Label> <TextArea id="taskDescription" value={description} onChange={(e) => setDescription(e.target.value)} placeholder="Введите описание задачи..." /> </InputGroup> <Calendar /> <Button type="submit">Создать задачу</Button> </Form> </PopupContent> </PopupWrapper> ); } export default PopNewCard;

//// file: src\components\Popups\PopNewCard\PopNewCardStyles.js
import styled from 'styled-components'; export const PopupWrapper = styled.div` position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); display: flex; justify-content: center; align-items: center; z-index: 1000; `; export const PopupContent = styled.div` background-color: ${props => props.theme.cardBackground}; border-radius: 10px; padding: 40px 30px; width: 630px; max-width: 90%; `; export const Title = styled.h3` font-size: 20px; font-weight: bold; color: ${props => props.theme.textPrimary}; margin-bottom: 20px; `; export const Form = styled.form` display: flex; flex-direction: column; gap: 20px; `; export const InputGroup = styled.div` display: flex; flex-direction: column; `; export const Label = styled.label` font-size: 14px; color: ${props => props.theme.textSecondary}; margin-bottom: 10px; `; export const Input = styled.input` padding: 10px; border: 1px solid ${props => props.theme.secondary}; border-radius: 5px; background-color: ${props => props.theme.cardBackground}; color: ${props => props.theme.textPrimary}; `; export const TextArea = styled.textarea` width: 100%; height: 100px; padding: 10px; border: 1px solid ${props => props.theme.secondary}; border-radius: 5px; background-color: ${props => props.theme.cardBackground}; color: ${props => props.theme.textPrimary}; resize: vertical; `; export const Button = styled.button` padding: 8px 20px; border-radius: 4px; font-size: 14px; cursor: pointer; background-color: ${props => props.theme.primary}; color: ${props => props.theme.cardBackground}; border: none; `;

//// file: src\components\Popups\PopUser\PopUser.jsx
import React from 'react'; import { PopUserWrapper, UserName, UserEmail, ThemeToggle, ExitButton } from './PopUserStyles'; function PopUser({ isOpen }) { if (!isOpen) return null; return ( <PopUserWrapper isOpen={isOpen} id="user-set-target"> <UserName>Ivan Ivanov</UserName> <UserEmail>ivan.ivanov@gmail.com</UserEmail> <ThemeToggle> <p>Темная тема</p> <input type="checkbox" className="checkbox" name="checkbox" /> </ThemeToggle> <ExitButton> <a href="#popExit">Выйти</a> </ExitButton> </PopUserWrapper> ); } export default PopUser;

//// file: src\components\Popups\PopUser\PopUserStyles.js
import styled from 'styled-components'; import { buttonStyles, cardContainerStyles } from '../../styles/CommonStyles'; export const PopUserWrapper = styled.div` ${cardContainerStyles} display: ${props => props.isOpen ? 'block' : 'none'}; position: absolute; top: 61px; right: 0; width: 213px; padding: 34px; text-align: center; z-index: 2; `; export const UserName = styled.p` color: ${props => props.theme.textPrimary}; font-size: 14px; font-weight: 500; line-height: 21px; margin-bottom: 4px; `; export const UserEmail = styled.p` color: ${props => props.theme.textSecondary}; font-size: 14px; line-height: 21px; margin-bottom: 10px; `; export const ThemeToggle = styled.div` display: flex; align-items: center; justify-content: space-between; margin-bottom: 30px; `; export const ExitButton = styled.button` ${buttonStyles} width: 72px; height: 30px; background: transparent; color: ${props => props.theme.primary}; border: 1px solid ${props => props.theme.primary}; `;

//// file: src\index.css
font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;line-height: 1.5;font-weight: 400;color-scheme: light dark;color: rgba(255, 255, 255, 0.87);background-color: #242424;font-synthesis: none;text-rendering: optimizeLegibility;-webkit-font-smoothing: antialiased;-moz-osx-font-smoothing: grayscale;}a {font-weight: 500;color: #646cff;text-decoration: inherit;}a:hover {color: #535bf2;}body {margin: 0;display: flex;place-items: center;min-width: 320px;min-height: 100vh;}h1 {font-size: 3.2em;line-height: 1.1;}button {border-radius: 8px;border: 1px solid transparent;padding: 0.6em 1.2em;font-size: 1em;font-weight: 500;font-family: inherit;background-color: #1a1a1a;cursor: pointer;transition: border-color 0.25s;}button:hover {border-color: #646cff;}button:focus,button:focus-visible {outline: 4px auto -webkit-focus-ring-color;}@media (prefers-color-scheme: light) {:root {color: #213547;background-color: #ffffff;}a:hover {color: #747bff;}button {background-color: #f9f9f9;}

//// file: src\main.jsx
import React from 'react' import ReactDOM from 'react-dom/client' import App from './App.jsx' import './App.css'; import '../data.js'; ReactDOM.createRoot(document.getElementById('root')).render( <React.StrictMode> <App /> </React.StrictMode>, )

//// file: src\pages\CardPage.jsx
import React from 'react'; import { useParams } from 'react-router-dom'; import { CardPageWrapper, Title, CardInfo, CardContainer } from '../styles/CardPageStyles'; function CardPage() { const { id } = useParams(); return ( <CardPageWrapper> <CardContainer> <Title>Карточка задачи</Title> <CardInfo>ID задачи: {id}</CardInfo> {/* В 6 домашке будет реализована */} </CardContainer> </CardPageWrapper> ); } export default CardPage;

//// file: src\pages\ExitPage.jsx
import React, { useEffect } from 'react'; import { useNavigate } from 'react-router-dom'; import { ExitPageWrapper, ExitMessage } from '../styles/ExitePageStyles'; function ExitPage({ setIsAuth }) { const navigate = useNavigate(); useEffect(() => { setIsAuth(false); setTimeout(() => { navigate('/login'); }, 2000); }, [setIsAuth, navigate]); return ( <ExitPageWrapper> <ExitMessage>Выход из системы...</ExitMessage> </ExitPageWrapper> ); } export default ExitPage;

//// file: src\pages\LoginPage.jsx
import React, { useState } from 'react'; import { Link, useNavigate } from 'react-router-dom'; import { LoginWrapper, LoginForm, Title, Input, Button, ErrorMessage, LinkWrapper } from '../styles/LoginPageStyles'; function LoginPage({ setIsAuth }) { const [email, setEmail] = useState(''); const [password, setPassword] = useState(''); const [error, setError] = useState(''); const navigate = useNavigate(); const handleSubmit = (e) => { e.preventDefault(); if (email === 'user@example.com' && password === 'password') { setIsAuth(true); navigate('/'); } else { setError('Введенные вами данные не распознаны. Проверьте свой логин и пароль и повторите попытку входа.'); } }; return ( <LoginWrapper> <LoginForm onSubmit={handleSubmit}> <Title>Вход</Title> <Input type="email" value={email} onChange={(e) => setEmail(e.target.value)} placeholder="Эл. почта" required error={error} /> <Input type="password" value={password} onChange={(e) => setPassword(e.target.value)} placeholder="Пароль" required error={error} /> {error && <ErrorMessage>{error}</ErrorMessage>} <Button type="submit" error={error}> Войти </Button> <LinkWrapper> <Link to="/register">Нужно зарегистрироваться? <u>Регистрируйтесь здесь</u> </Link> </LinkWrapper> </LoginForm> </LoginWrapper> ); } export default LoginPage;

//// file: src\pages\MainPage.jsx
import React, { useState, useEffect } from 'react'; import Header from '../components/Header/Header'; import Main from '../components/Main/Main'; import PopBrowse from '../components/Popups/PopBrowse/PopBrowse'; import PopNewCard from '../components/Popups/PopNewCard/PopNewCard'; import { cardList } from '../../data'; import { MainPageWrapper } from '../styles/MainPageStyles'; function MainPage({ toggleTheme }) { const [cards, setCards] = useState([]); const [isLoading, setIsLoading] = useState(true); const [isNewCardPopupOpen, setIsNewCardPopupOpen] = useState(false); const [editingCard, setEditingCard] = useState(null); useEffect(() => { setTimeout(() => { setCards(cardList); setIsLoading(false); }, 2000); }, []); const onCardAdd = (newCard) => { setCards([...cards, newCard]); }; const onCardEdit = (editedCard) => { setCards(cards.map(card => card.id === editedCard.id ? editedCard : card)); setEditingCard(null); }; const onCardDelete = (cardId) => { setCards(cards.filter(card => card.id !== cardId)); }; return ( <MainPageWrapper> <Header onCardAdd={() => setIsNewCardPopupOpen(true)} toggleTheme={toggleTheme} /> {isLoading ? ( <div className="loading">Данные загружаются...</div> ) : ( <Main cards={cards} onCardEdit={(card) => setEditingCard(card)} onCardDelete={onCardDelete} /> )} <PopBrowse card={editingCard} onClose={() => setEditingCard(null)} onEdit={onCardEdit} onDelete={onCardDelete} /> <PopNewCard isOpen={isNewCardPopupOpen} onClose={() => setIsNewCardPopupOpen(false)} onCardAdd={onCardAdd} /> </MainPageWrapper> ); } export default MainPage;

//// file: src\pages\NotFoundPage.jsx
import React from 'react'; import { Link } from 'react-router-dom'; import { NotFoundWrapper, Title, Message, StyledLink } from '../styles/NotFoundPageStyles'; const NotFoundPage = () => { return ( <NotFoundWrapper> <Title>404</Title> <Message>Страница не найдена</Message> <Link to="/" component={StyledLink}>Вернуться на главную</Link> </NotFoundWrapper> ); }; export default NotFoundPage;

//// file: src\pages\RegisterPage.jsx
import React, { useState } from 'react'; import { Link, useNavigate } from 'react-router-dom'; import { RegisterWrapper, RegisterForm, Title, Input, Button } from '../styles/RegisterPageStyles'; const RegisterPage = () => { const [username, setUsername] = useState(''); const [email, setEmail] = useState(''); const [password, setPassword] = useState(''); const [error, setError] = useState(''); const navigate = useNavigate(); const handleSubmit = (e) => { e.preventDefault(); console.log('Регистрация:', email, password); navigate('/login'); }; return ( <RegisterWrapper> <RegisterForm onSubmit={handleSubmit}> <Title>Регистрация</Title> {error && <ErrorMessage>{error}</ErrorMessage>} <Input type="text" value={username} onChange={(e) => setUsername(e.target.value)} placeholder="Имя пользователя" required /> <Input type="email" value={email} onChange={(e) => setEmail(e.target.value)} placeholder="Email" required /> <Input type="password" value={password} onChange={(e) => setPassword(e.target.value)} placeholder="Пароль" required /> <Button type="submit">Зарегистрироваться</Button> <p> Уже есть аккаунт? <Link to="/login">Войти</Link> </p> </RegisterForm> </RegisterWrapper> ); } export default RegisterPage;

//// file: src\styles\CardPageStyles.js
import styled from 'styled-components'; export const CardPageWrapper = styled.div` padding: 20px; background-color: ${props => props.theme.background}; min-height: 100vh; `; export const Title = styled.h1` color: ${props => props.theme.textPrimary}; font-size: 24px; margin-bottom: 20px; `; export const CardInfo = styled.p` color: ${props => props.theme.textSecondary}; font-size: 16px; margin-bottom: 10px; `; export const CardContainer = styled.div` background-color: ${props => props.theme.cardBackground}; border-radius: 8px; padding: 20px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); `;

//// file: src\styles\CommonStyles.js
import { css } from 'styled-components'; export const buttonStyles = css` cursor: pointer; border: none; outline: none; border-radius: 4px; font-size: 14px; font-weight: 500; line-height: 1; color: ${props => props.theme.cardBackground}; background-color: ${props => props.theme.primary}; padding: 8px 20px; transition: background-color 0.3s ease; &:hover { background-color: ${props => props.theme.secondary}; } `; export const cardContainerStyles = css` background-color: ${props => props.theme.cardBackground}; box-shadow: 0px 10px 39px rgba(26, 56, 101, 0.21); border-radius: 10px; `;

//// file: src\styles\ExitePageStyles.js
import styled from 'styled-components'; export const ExitPageWrapper = styled.div` display: flex; justify-content: center; align-items: center; height: 100vh; background-color: ${props => props.theme.background}; `; export const ExitMessage = styled.h2` color: ${props => props.theme.textPrimary}; font-size: 24px; text-align: center; `;

//// file: src\styles\GlobalStyles.js
import { createGlobalStyle } from 'styled-components'; const GlobalStyle = createGlobalStyle` * { margin: 0; padding: 0; box-sizing: border-box; } *:before, *:after { box-sizing: border-box; } body { font-family: "Roboto", Arial, Helvetica, sans-serif; color: ${props => props.theme.textPrimary}; background-color: ${props => props.theme.background}; *:focus { outline: none; } } input, textarea, button { font-family: inherit; } a, a:visited { text-decoration: none; cursor: pointer; } button { cursor: pointer; outline: none; } ul li { list-style: none; } .wrapper { max-width: 100%; width: 100vw; min-height: 100vh; overflow: hidden; background-color: ${props => props.theme.background}; } .container { max-width: 1260px; width: 100%; margin: 0 auto; padding: 0 30px; } .loading { display: flex; justify-content: center; align-items: center; height: 100vh; font-size: 24px; color: #333; } `; export default GlobalStyle;

//// file: src\styles\LoginPageStyles.js
import styled from 'styled-components'; export const MainPageWrapper = styled.div` width: 100%; height: 100%; overflow-x: hidden; `; export const LoginWrapper = styled.div` display: flex; justify-content: center; align-items: center; height: 100vh; background-color: ${props => props.theme.background}; `; export const LoginForm = styled.form` width: 368px; padding: 50px 60px; background-color: ${props => props.theme.cardBackground}; border-radius: 8px; border: 0.7px solid ${props => props.theme.name === 'dark' ? '#4E5566' : '#D4DBE5'}; box-shadow: 0px 4px 67px -12px rgba(0, 0, 0, 0.13); display: flex; flex-direction: column; gap: 10px; `; export const Title = styled.h2` text-align: center; margin-bottom: 20px; color: ${props => props.theme.textPrimary}; `; export const Input = styled.input` width: 100%; padding: 10px; border: 0.7px solid ${props => props.error ? 'red' : props.theme.primary}; border-radius: 8px; padding: 8px, 10px, 8px, 10px; background-color: ${props => props.theme.cardBackground}; color: ${props => props.theme.textPrimary}; &:focus { border-color: ${props => props.theme.primary}; box-shadow: 0 0 0 2px ${props => `${props.theme.primary}33`}; } `; export const Button = styled.button` width: 100%; padding: 10px; margin-top: 20px; /* background-color: ${props => props.theme.primary}; */ background-color: ${props => props.error ? '#94A6BE' : props.theme.primary}; color: ${props => props.theme.cardBackground}; border: none; border-radius: 5px; cursor: pointer; `; export const ErrorMessage = styled.p` font-family: Arial; font-size: 12px; font-weight: 400; line-height: 18px; letter-spacing: -0.01em; text-align: center; color: red; `; export const LinkWrapper = styled.div` margin-top: 20px; text-align: center; a { color: ${props => props.theme.primary}; text-decoration: none; line-height:21px; color: #94A6BE66; &:hover { text-decoration: underline; } } `;

//// file: src\styles\MainPageStyles.js
import styled from 'styled-components'; export const MainPageWrapper = styled.div` width: 100%; height: 100%; overflow-x: hidden; `;

//// file: src\styles\NotFoundPageStyles.js
import styled from 'styled-components'; export const NotFoundWrapper = styled.div` display: flex; flex-direction: column; justify-content: center; align-items: center; height: 100vh; background-color: ${props => props.theme.background}; color: ${props => props.theme.textPrimary}; `; export const Title = styled.h1` font-size: 48px; margin-bottom: 20px; `; export const Message = styled.p` font-size: 24px; margin-bottom: 20px; `; export const StyledLink = styled.a` color: ${props => props.theme.primary}; text-decoration: none; font-size: 18px; &:hover { text-decoration: underline; } `;

//// file: src\styles\RegisterPageStyles.js
import styled from 'styled-components'; export const RegisterWrapper = styled.div` display: flex; justify-content: center; align-items: center; height: 100vh; background-color: ${props => props.theme.background}; `; export const RegisterForm = styled.form` width: 368px; padding: 50px 60px; background-color: ${props => props.theme.cardBackground}; border-radius: 10px; box-shadow: 0px 4px 67px -12px rgba(0, 0, 0, 0.13); `; export const Title = styled.h2` margin-bottom: 20px; color: ${props => props.theme.textPrimary}; `; export const Input = styled.input` width: 100%; padding: 10px; margin-bottom: 10px; border: 1px solid ${props => props.theme.secondary}; border-radius: 5px; background-color: ${props => props.theme.cardBackground}; color: ${props => props.theme.textPrimary}; `; export const Button = styled.button` width: 100%; padding: 10px; margin-top: 20px; background-color: ${props => props.theme.primary}; color: ${props => props.theme.cardBackground}; border: none; border-radius: 5px; cursor: pointer; `; export const ErrorMessage = styled.p` color: red; margin-top: 10px; `;

//// file: src\styles\Themes.js
export const themeColors = { light: { primary: "#565EEF", secondary: "#94A6BE", background: "#EAEEF6", cardBackground: "#FFFFFF", textPrimary: "#000000", textSecondary: "#94A6BE", topicStyles: { 'web-design': { backgroundColor: "#FFE4C2", color: "#FF6D00" }, 'research': { backgroundColor: "#B4FDD1", color: "#06B16E" }, 'copywriting': { backgroundColor: "#E9D4FF", color: "#9A48F1" }, 'default': { backgroundColor: "#94A6BE", color: "#FFFFFF" } } }, dark: { primary: "#565EEF", secondary: "#94A6BE", background: "#20202C", cardBackground: "#2D2D3A", textPrimary: "#FFFFFF", textSecondary: "#94A6BE", shadowColor: "rgba(0, 0, 0, 0.3)", topicStyles: { 'web-design': { backgroundColor: "#FF6D00", color: "#FFE4C2" }, 'research': { backgroundColor: "#06B16E", color: "#B4FDD1" }, 'copywriting': { backgroundColor: "#9A48F1", color: "#E9D4FF" }, 'default': { backgroundColor: "#94A6BE", color: "#FFFFFF" } }, modalBackground: "#20202C", modalBorder: "#4E5566" } };

//// file: vite.config.js
import { defineConfig } from 'vite' import react from '@vitejs/plugin-react' export default defineConfig({ plugins: [react()], })

